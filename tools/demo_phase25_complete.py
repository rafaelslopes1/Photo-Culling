#!/usr/bin/env python3
"""
Demonstra√ß√£o completa da Fase 2.5 - Melhorias Cr√≠ticas
Mostra a integra√ß√£o do OverexposureAnalyzer e UnifiedScoringSystem
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import json
from src.core.feature_extractor import FeatureExtractor

def demo_phase25_complete():
    """Demonstra√ß√£o completa das capacidades da Fase 2.5"""
    
    print("üöÄ DEMONSTRA√á√ÉO FASE 2.5 - MELHORIAS CR√çTICAS")
    print("="*80)
    print("Photo Culling System v2.5 - An√°lise Completa de Superexposi√ß√£o e Scoring")
    print("="*80)
    
    # Initialize feature extractor
    print("\nüì¶ Inicializando sistema...")
    extractor = FeatureExtractor()
    
    # Check Phase 2.5 capabilities
    has_overexposure = hasattr(extractor, 'overexposure_analyzer') and extractor.overexposure_analyzer is not None
    has_scoring = hasattr(extractor, 'unified_scoring_system') and extractor.unified_scoring_system is not None
    
    print(f"   üî• OverexposureAnalyzer: {'‚úÖ Ativo' if has_overexposure else '‚ùå Inativo'}")
    print(f"   üìä UnifiedScoringSystem: {'‚úÖ Ativo' if has_scoring else '‚ùå Inativo'}")
    
    if not (has_overexposure and has_scoring):
        print("\n‚ùå Fase 2.5 n√£o est√° completamente dispon√≠vel")
        return False
    
    # Test images
    test_images = [
        "data/input/IMG_0001.JPG",  # Known overexposure case
        # Add more test images as available
    ]
    
    for image_path in test_images:
        if not os.path.exists(image_path):
            print(f"\n‚ö†Ô∏è Imagem n√£o encontrada: {image_path}")
            continue
            
        print(f"\nüì∏ ANALISANDO: {os.path.basename(image_path)}")
        print("-" * 60)
        
        # Extract features
        features = extractor.extract_features(image_path)
        
        if not features:
            print("‚ùå Erro ao extrair features")
            continue
            
        # === OVEREXPOSURE ANALYSIS ===
        print("\nüî• AN√ÅLISE DE SUPEREXPOSI√á√ÉO:")
        overexp_critical = features.get('overexposure_is_critical', False)
        face_ratio = features.get('overexposure_face_critical_ratio', 0.0)
        torso_ratio = features.get('overexposure_torso_critical_ratio', 0.0)
        main_reason = features.get('overexposure_main_reason', 'unknown')
        recovery = features.get('overexposure_recovery_difficulty', 'unknown')
        recommendation = features.get('overexposure_recommendation', 'unknown')
        
        print(f"   Status: {'üö® CR√çTICA' if overexp_critical else '‚úÖ OK'}")
        print(f"   Face: {face_ratio:.1%} superexposta")
        print(f"   Torso: {torso_ratio:.1%} superexposto")
        print(f"   Motivo: {main_reason}")
        print(f"   Recupera√ß√£o: {recovery}")
        print(f"   Recomenda√ß√£o: {recommendation}")
        
        # === UNIFIED SCORING ===
        print("\nüìä SISTEMA DE SCORE UNIFICADO:")
        final_score = features.get('unified_final_score', 0.0)
        rating = features.get('unified_rating', 'unknown')
        is_rejected = features.get('unified_is_rejected', False)
        ranking_priority = features.get('unified_ranking_priority', 0)
        is_recoverable = features.get('unified_is_recoverable', True)
        unified_recommendation = features.get('unified_recommendation', 'unknown')
        
        # Get component scores (may be complex objects)
        tech_score = features.get('unified_technical_score', 0.0)
        person_score = features.get('unified_person_score', 0.0)
        composition_score = features.get('unified_composition_score', 0.0)
        context_bonus = features.get('unified_context_bonus', 0.0)
        
        # Handle complex score objects
        if isinstance(tech_score, dict):
            tech_score = tech_score.get('contribution', 0.0)
        if isinstance(person_score, dict):
            person_score = person_score.get('contribution', 0.0)
        if isinstance(composition_score, dict):
            composition_score = composition_score.get('contribution', 0.0)
        if isinstance(context_bonus, dict):
            context_bonus = context_bonus.get('contribution', 0.0)
        
        print(f"   Score Final: {final_score:.1%}")
        print(f"   Rating: {rating.upper()}")
        print(f"   Status: {'üóëÔ∏è REJEITADA' if is_rejected else '‚úÖ APROVADA'}")
        print(f"   Ranking Priority: {ranking_priority}")
        print(f"   Recuper√°vel: {'‚úÖ Sim' if is_recoverable else '‚ùå N√£o'}")
        print(f"   Recomenda√ß√£o: {unified_recommendation}")
        
        print(f"\n   üìà BREAKDOWN DE SCORES:")
        print(f"      ‚Ä¢ T√©cnico: {tech_score:.3f}")
        print(f"      ‚Ä¢ Pessoa: {person_score:.3f}")
        print(f"      ‚Ä¢ Composi√ß√£o: {composition_score:.3f}")
        print(f"      ‚Ä¢ B√¥nus Contexto: {context_bonus:.3f}")
        
        # === DECISION SUMMARY ===
        print(f"\nüéØ RESUMO DA DECIS√ÉO:")
        
        if overexp_critical:
            print("   üö® ATEN√á√ÉO: Superexposi√ß√£o cr√≠tica detectada!")
            print(f"      ‚Ä¢ Regi√£o mais afetada: {'Face' if face_ratio > torso_ratio else 'Torso'}")
            print(f"      ‚Ä¢ Severidade: {max(face_ratio, torso_ratio):.1%}")
            print(f"      ‚Ä¢ Dificuldade de recupera√ß√£o: {recovery}")
        
        if is_rejected:
            print("   üóëÔ∏è REJEI√á√ÉO AUTOM√ÅTICA: Problemas cr√≠ticos identificados")
        else:
            print(f"   ‚úÖ APROVADA para revis√£o - Score: {final_score:.1%} ({rating})")
            print(f"   üìà Priority ranking: #{ranking_priority}")
        
        # === RECOMMENDATIONS ===
        print(f"\nüí° RECOMENDA√á√ïES:")
        
        if overexp_critical and recovery == 'hard':
            print("   ‚Ä¢ Considere descartar devido √† superexposi√ß√£o severa")
            print("   ‚Ä¢ Se mantiver, use ferramentas de recupera√ß√£o de highlights")
            print("   ‚Ä¢ Aplique m√°scaras localizadas nas √°reas problem√°ticas")
        elif overexp_critical and recovery in ['easy', 'moderate']:
            print("   ‚Ä¢ Recuper√°vel com edi√ß√£o cuidadosa")
            print("   ‚Ä¢ Ajuste highlights e shadows localmente")
            print("   ‚Ä¢ Verifique se vale o esfor√ßo vs qualidade final")
        
        if rating == 'excellent':
            print("   ‚Ä¢ ‚≠ê Qualidade excelente - Prioridade m√°xima")
        elif rating == 'good':
            print("   ‚Ä¢ ‚úÖ Boa qualidade - Adequada para uso")
        elif rating == 'acceptable':
            print("   ‚Ä¢ ‚ö†Ô∏è Qualidade aceit√°vel - Use se necess√°rio")
        elif rating == 'poor':
            print("   ‚Ä¢ ‚ùå Qualidade ruim - Considere descartar")
        
        print("\n" + "="*60)
    
    print(f"\n‚úÖ DEMONSTRA√á√ÉO FASE 2.5 CONCLU√çDA")
    print("   üî• OverexposureAnalyzer: Funcionando perfeitamente")
    print("   üìä UnifiedScoringSystem: Funcionando perfeitamente")
    print("   üöÄ Sistema pronto para uso em produ√ß√£o")
    
    return True

if __name__ == "__main__":
    demo_phase25_complete()
